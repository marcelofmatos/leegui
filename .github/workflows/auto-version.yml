name: Auto Version on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  auto-version:
    runs-on: ubuntu-latest
    
    if: github.event.pull_request.merged == true
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Get Version
      id: version
      run: |
        echo "=== Getting Current Version ==="
        
        # Fetch all tags
        git fetch --tags
        
        # Get all tags
        ALL_TAGS=$(git tag -l)
        
        if [ -z "$ALL_TAGS" ]; then
          echo "No tags found - starting with 1.0.0"
          CURRENT_VERSION="none"
          NEW_VERSION="1.0.0"
        else
          echo "Found tags:"
          echo "$ALL_TAGS"
          
          # Find highest semantic version
          HIGHEST_VERSION=""
          HIGHEST_MAJOR=0
          HIGHEST_MINOR=0
          HIGHEST_PATCH=0
          
          echo "$ALL_TAGS" | while read -r tag; do
            if [ -n "$tag" ]; then
              # Clean tag (remove v prefix)
              clean=$(echo "$tag" | sed 's/^v//')
              
              # Check if it matches x.y.z pattern
              case "$clean" in
                [0-9]*.[0-9]*.[0-9]*)
                  echo "Valid version: $clean"
                  
                  major=$(echo "$clean" | cut -d. -f1)
                  minor=$(echo "$clean" | cut -d. -f2)
                  patch=$(echo "$clean" | cut -d. -f3)
                  
                  # Simple comparison
                  if [ "$major" -gt "$HIGHEST_MAJOR" ] || \
                     ( [ "$major" -eq "$HIGHEST_MAJOR" ] && [ "$minor" -gt "$HIGHEST_MINOR" ] ) || \
                     ( [ "$major" -eq "$HIGHEST_MAJOR" ] && [ "$minor" -eq "$HIGHEST_MINOR" ] && [ "$patch" -gt "$HIGHEST_PATCH" ] ); then
                    echo "NEW_VERSION=$major.$minor.$patch" > /tmp/version.txt
                    echo "CURRENT_TAG=$tag" > /tmp/current.txt
                  fi
                  ;;
              esac
            fi
          done
          
          if [ -f "/tmp/version.txt" ]; then
            source /tmp/version.txt
            source /tmp/current.txt
            echo "Current highest version: $NEW_VERSION"
            
            # Increment patch
            current_patch=$(echo "$NEW_VERSION" | cut -d. -f3)
            new_patch=$((current_patch + 1))
            major=$(echo "$NEW_VERSION" | cut -d. -f1)
            minor=$(echo "$NEW_VERSION" | cut -d. -f2)
            
            NEW_VERSION="$major.$minor.$new_patch"
            CURRENT_VERSION="$CURRENT_TAG"
          else
            echo "No semantic versions found - starting with 1.0.0"
            CURRENT_VERSION="none"
            NEW_VERSION="1.0.0"
          fi
        fi
        
        echo "Current: $CURRENT_VERSION"
        echo "New: $NEW_VERSION"
        
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Create Tag
      run: |
        NEW_TAG="${{ steps.version.outputs.new_version }}"
        echo "Creating tag: $NEW_TAG"
        
        git tag "$NEW_TAG"
        git push origin "$NEW_TAG"
        
        echo "Tag $NEW_TAG created successfully"

    - name: Generate Changelog
      id: changelog
      run: |
        CURRENT="${{ steps.version.outputs.current_version }}"
        
        if [ "$CURRENT" = "none" ]; then
          echo "First release"
          CHANGES="- Initial release"
        else
          echo "Getting changes since $CURRENT"
          CHANGES=$(git log "$CURRENT"..HEAD --oneline --no-merges | head -20 | sed 's/^/- /')
          
          if [ -z "$CHANGES" ]; then
            CHANGES="- Minor updates and improvements"
          fi
        fi
        
        echo "changes<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        CHANGES="${{ steps.changelog.outputs.changes }}"
        
        # Create release using GitHub CLI
        gh release create "$NEW_VERSION" \
          --title "$NEW_VERSION" \
          --notes "## $NEW_VERSION

$CHANGES"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update package.json
      run: |
        if [ -f "package.json" ]; then
          echo "Updating package.json version"
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version --allow-same-version
          
          git add package.json
          if [ -f "package-lock.json" ]; then
            git add package-lock.json
          fi
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
            git push origin main
          fi
        else
          echo "No package.json found, skipping"
        fi

    - name: Summary
      run: |
        echo "## ðŸš€ Release Created!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**New Version:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Previous:** ${{ steps.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
