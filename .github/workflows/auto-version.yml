name: Create Release (Manual Trigger)

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version increment'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Get Current Version
      id: current
      run: |
        git fetch --tags
        
        LATEST_TAG=$(git tag -l | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
        
        if [ -z "$LATEST_TAG" ]; then
          echo "No previous versions found"
          CURRENT_VERSION="0.0.0"
        else
          echo "Latest version: $LATEST_TAG"
          CURRENT_VERSION="$LATEST_TAG"
        fi
        
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Calculate New Version
      id: version
      run: |
        CURRENT="${{ steps.current.outputs.current_version }}"
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        
        if [ "$CURRENT" = "0.0.0" ]; then
          NEW_VERSION="1.0.0"
        else
          MAJOR=$(echo "$CURRENT" | cut -d. -f1)
          MINOR=$(echo "$CURRENT" | cut -d. -f2)
          PATCH=$(echo "$CURRENT" | cut -d. -f3)
          
          case "$VERSION_TYPE" in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
        fi
        
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Get Merged PRs Since Last Release
      id: prs
      run: |
        CURRENT="${{ steps.current.outputs.current_version }}"
        
        if [ "$CURRENT" = "0.0.0" ]; then
          echo "Getting recent commits for initial release"
          SINCE_DATE=$(date -d '30 days ago' '+%Y-%m-%d')
          PRS=$(gh pr list --state merged --limit 50 --search "merged:>$SINCE_DATE" --json number,title,author | jq -r '.[] | "- #\(.number): \(.title) (@\(.author.login))"')
        else
          echo "Getting PRs since $CURRENT"
          # Get commit date of last tag
          TAG_DATE=$(git log -1 --format=%ci "$CURRENT" 2>/dev/null || echo "30 days ago")
          SINCE_DATE=$(date -d "$TAG_DATE" '+%Y-%m-%d')
          PRS=$(gh pr list --state merged --limit 50 --search "merged:>$SINCE_DATE" --json number,title,author | jq -r '.[] | "- #\(.number): \(.title) (@\(.author.login))"')
        fi
        
        if [ -z "$PRS" ]; then
          PRS="- Minor updates and improvements"
        fi
        
        echo "prs<<EOF" >> $GITHUB_OUTPUT
        echo "$PRS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Tag
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        echo "Creating tag: $NEW_VERSION"
        git tag "$NEW_VERSION"
        git push origin "$NEW_VERSION"

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        release_name: ${{ steps.version.outputs.new_version }}
        body: |
          ## ${{ steps.version.outputs.new_version }}
          
          ### ðŸš€ What's Changed
          
          ${{ steps.prs.outputs.prs }}
          
          ### ðŸ“Š Release Info
          - **Type**: ${{ github.event.inputs.version_type }} release
          - **Previous Version**: ${{ steps.current.outputs.current_version }}
          - **Released by**: @${{ github.actor }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}

    - name: Update package.json
      run: |
        if [ -f "package.json" ]; then
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version --allow-same-version
          
          git add package.json package-lock.json 2>/dev/null || git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}" || echo "No changes"
          git push origin main || git push origin master
        fi

    - name: Notify Team
      run: |
        echo "## ðŸŽ‰ Release ${{ steps.version.outputs.new_version }} Created!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Type**: ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Previous**: ${{ steps.current.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Featured Changes" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.prs.outputs.prs }}" >> $GITHUB_STEP_SUMMARY
