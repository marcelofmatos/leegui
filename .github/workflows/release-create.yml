name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version increment'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get Current Version
        id: current
        run: |
          git fetch --tags
          
          LATEST_TAG=$(git tag -l | grep -E '^[0-9]+\.[0-9]+\.[0-9]+ | sort -V | tail -1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous versions found"
            CURRENT_VERSION="0.0.0"
          else
            echo "Latest version: $LATEST_TAG"
            CURRENT_VERSION="$LATEST_TAG"
          fi
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate New Version
        id: version
        run: |
          CURRENT="${{ steps.current.outputs.current_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          if [ "$CURRENT" = "0.0.0" ]; then
            NEW_VERSION="1.0.0"
          else
            MAJOR=$(echo "$CURRENT" | cut -d. -f1)
            MINOR=$(echo "$CURRENT" | cut -d. -f2)
            PATCH=$(echo "$CURRENT" | cut -d. -f3)
            
            case "$VERSION_TYPE" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Get Recent Changes
        id: changes
        run: |
          CURRENT="${{ steps.current.outputs.current_version }}"
          
          if [ "$CURRENT" = "0.0.0" ]; then
            echo "Getting recent commits for initial release"
            CHANGES=$(git log --oneline --no-merges -20 | sed 's/^/- /' | head -10)
          else
            echo "Getting changes since $CURRENT"
            CHANGES=$(git log "$CURRENT"..HEAD --oneline --no-merges | sed 's/^/- /' | head -20)
          fi
          
          if [ -z "$CHANGES" ]; then
            CHANGES="- Minor updates and improvements"
          fi
          
          {
            echo "changelog<<EOF"
            echo "$CHANGES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          echo "Creating tag: $NEW_VERSION"
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Create Release
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          CURRENT_VERSION="${{ steps.current.outputs.current_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          CHANGES="${{ steps.changes.outputs.changelog }}"
          
          PRERELEASE_FLAG=""
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          RELEASE_NOTES="## $NEW_VERSION

### ðŸš€ What's Changed

$CHANGES

### ðŸ“Š Release Info
- **Type**: $VERSION_TYPE release
- **Previous Version**: $CURRENT_VERSION
- **Released by**: @${{ github.actor }}"
          
          gh release create "$NEW_VERSION" \
            --title "$NEW_VERSION" \
            --notes "$RELEASE_NOTES" \
            $PRERELEASE_FLAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package.json
        run: |
          if [ -f "package.json" ]; then
            VERSION="${{ steps.version.outputs.new_version }}"
            echo "Updating package.json to version $VERSION"
            
            npm version "$VERSION" --no-git-tag-version --allow-same-version
            
            git add package.json
            if [ -f "package-lock.json" ]; then
              git add package-lock.json
            fi
            
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              git commit -m "chore: bump version to $VERSION"
              git push origin main || git push origin master
            fi
          else
            echo "No package.json found, skipping version update"
          fi

      - name: Notify Team
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          CURRENT_VERSION="${{ steps.current.outputs.current_version }}"
          CHANGES="${{ steps.changes.outputs.changelog }}"
          
          {
            echo "## ðŸŽ‰ Release $NEW_VERSION Created!"
            echo ""
            echo "**Type**: $VERSION_TYPE"
            echo "**Previous**: $CURRENT_VERSION"
            echo ""
            echo "### Featured Changes"
            echo "$CHANGES"
          } >> $GITHUB_STEP_SUMMARY
