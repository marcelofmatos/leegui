name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: PHP Tests
    runs-on: ubuntu-latest
    container:
      image: php:7.4-cli
    
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apt-get update && apt-get install -y \
          git \
          unzip \
          libsqlite3-dev \
          libzip-dev \
          libldap2-dev
        docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/
        docker-php-ext-install pdo_sqlite zip ldap

    - name: Install Composer
      run: |
        curl -sS https://getcomposer.org/installer | php
        mv composer.phar /usr/local/bin/composer

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Setup project
      run: |
        composer install --prefer-dist --no-progress --no-interaction
        cp .env.example .env
        sed -i 's/^APP_KEY=.*/APP_KEY=base64:72v5RiEiJd2GTMKw0oykkFu8SMVAdHlmUQqaVVMneE=/' .env
        mkdir -p database bootstrap/cache
        touch database/database.sqlite
        chmod -R 775 storage bootstrap/cache
        # Fix PackageManifest issue
        php -r "\$packages = json_decode(file_get_contents('vendor/composer/installed.json'), true); if (isset(\$packages['packages'])) { foreach (\$packages['packages'] as &\$package) { if (!isset(\$package['name'])) { \$package['name'] = 'unknown/package'; } } file_put_contents('vendor/composer/installed.json', json_encode(\$packages)); }"
        php artisan migrate --force --no-interaction
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Execute tests
      run: vendor/bin/phpunit

  build-frontend:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '14'
    
    - name: Build assets
      run: |
        npm install
        npm run production
    
    - name: Upload assets
      uses: actions/upload-artifact@v4
      with:
        name: frontend-assets
        path: |
          public/css/
          public/js/
          public/mix-manifest.json

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, build-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download frontend assets
      uses: actions/download-artifact@v4
      with:
        name: frontend-assets
        path: public/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      uses: docker/metadata-action@v5
      with:
        images: marcelofmatos/leegui
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
